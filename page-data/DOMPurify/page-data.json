{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/DOMPurify/",
    "result": {"data":{"cur":{"id":"6b77466b-9b4a-5a39-95ef-0580d9b40ced","html":"<h1 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro…</h1>\n <br />\n 회사에서 열심히 주어진 핫픽스를 하던 와중, \n <br />\n 낯서디 낯선 마크다운 렌더러를 만지게 되는데.\n <br />\n<p>임무는 외부링크로 연결되는 a태그를 새로운 창에서 열리게 하는 것이었다. <br />\n회사는 마크다운으로 회사 랜딩페이지의 글들을 렌더링하고 있었다. <br />\n렌더링 된 html에 <code class=\"language-text\">target=\"\\_blank\"</code> 속성을 넣고 팀장님이 이건 근본적인 해결이 아니라고 코멘트 해주셨다. <br /></p>\n<p>마크다운 문법을 html로 렌더링 시키는 렌더러에서 작업을 수행해야 했는데, <br />\n묘하게도 <code class=\"language-text\">target=\"\\_blank\"</code>속성만 DOM에 나타나지 않았다. <br />\n묘한일이다 묘한일이야… 뭔가 이상한데, 하며 입사 2주차였던 나는 선뜻 물어보지도 못하고 <br />\n머리를 꽁꽁 싸매고 있었다.</p>\n<p>이유는 뭐였을까?</p>\n <br />\n<h1 id=\"원인\" style=\"position:relative;\"><a href=\"#%EC%9B%90%EC%9D%B8\" aria-label=\"원인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>원인</h1>\n<p>범인은 <a href=\"https://github.com/cure53/DOMPurify\">DOM Purify</a> 였다.</p>\n<blockquote>\n<p>Dom Purify는 악성 스크립트를 삽입하는 XSS 공격을 막기 위한 라이브러리다.<br>\n깃허브를 보면 더러운 HTML을 깨끗한 HTML로 바꿔준다고 나와 있다.</p>\n</blockquote>\n<p>DOM Purify가 html을 살균하면서 보안에 취약한 <code class=\"language-text\">target=\"\\_blank\"</code>을 더티코드로 인식해 제거해버린 것이다.</p>\n<br />\n<h3 id=\"code-classlanguage-texttarget_blankcode-왜-보안에-취약할까\" style=\"position:relative;\"><a href=\"#code-classlanguage-texttarget_blankcode-%EC%99%9C-%EB%B3%B4%EC%95%88%EC%97%90-%EC%B7%A8%EC%95%BD%ED%95%A0%EA%B9%8C\" aria-label=\"code classlanguage texttarget_blankcode 왜 보안에 취약할까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">target=\"\\_blank\"</code> 왜 보안에 취약할까?</h3>\n<ul>\n<li>해당 속성들을 살펴보면서 알아보자</li>\n</ul>\n<blockquote>\n<p><code class=\"language-text\">&lt;a href=\"https://www.google.com/\" target=\"_blank\" rel=\"noopener noreferrer\"></code> <br /><br />\n이 둘은 보통 짝으로 같이 다니게 되는데, <code class=\"language-text\">rel</code> 속성은 낯설다.<br /> > <code class=\"language-text\">rel</code>은 연결된 리소스와 현재 문서 간의 관계를 정의하는 속성이다. <br />\n리소스가 연결되는 <code class=\"language-text\">&lt;link></code>, <code class=\"language-text\">&lt;a></code>, <code class=\"language-text\">&lt;area></code>, <code class=\"language-text\">&lt;form></code>에서 사용하는데 각 태그마다 올 수 있는 값이 다르다.</p>\n</blockquote>\n  <br />\n<ul>\n<li>\n<p>noopener</p>\n<ul>\n<li><code class=\"language-text\">&lt;a></code>, <code class=\"language-text\">&lt;area></code>, <code class=\"language-text\">&lt;form></code>에서 쓸 수 있다.</li>\n<li>새롭게 열린 브라우징 컨텍스트에 해당 리소스를 연 문서에 대한 접근 권한을 부여하지 않고 대상 리소스를 탐색하도록 브라우저에 지시한다.</li>\n<li>새롭게 열린 창에 window.opener 속성을 부여하지 않는다. (null을 반환)</li>\n<li>즉, 새롭게 열린 창이 원본의 창을 참조하지 못하게 막아준다.</li>\n<li>완전히 신뢰할 수 없는 링크와 연결 할 때 꼭 써야 한다.</li>\n<li><a href=\"https://mathiasbynens.github.io/rel-noopener/\">이 문서</a>에서 아주 자세히 설명해주고 있다.</li>\n</ul>\n</li>\n<li>\n<p>noreferrer</p>\n</li>\n<li>\n<p>다른 페이지를 탐색할 때, 페이지의 주소나 다른 값들을 HTTP 헤더를 통해 보내는 것을 막는다.</p>\n</li>\n</ul>\n<br />\n<h1 id=\"문제를-해결한-방법\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C%EB%A5%BC-%ED%95%B4%EA%B2%B0%ED%95%9C-%EB%B0%A9%EB%B2%95\" aria-label=\"문제를 해결한 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제를 해결한 방법</h1>\n<ul>\n<li>바로 DOMPutify 공식홈페이지에 들어갔다. 역시 반복해서 제기됐던 문제였는지, 커스텀 훅을 제공하고 있었다.</li>\n</ul>\n<p><a href=\"https://fossies.org/linux/DOMPurify/demos/README.md#:~:text=Hook%20to%20open%20all%20links%20in%20a%20new%20window\">링크</a></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// Add a hook to make all links open a new window\nDOMPurify.addHook('afterSanitizeAttributes', function (node) {\n  // set all elements owning target to target=_blank\n  if ('target' in node) {\n    node.setAttribute('target', '_blank');\n  }\n  // set non-HTML/MathML links to xlink:show=new\n  if (\n    !node.hasAttribute('target') &amp;&amp;\n    (node.hasAttribute('xlink:href') || node.hasAttribute('href'))\n  ) {\n    node.setAttribute('xlink:show', 'new');\n  }\n});\n\n// Clean HTML string and write into our DIV\nvar clean = DOMPurify.sanitize(dirty);</code></pre></div>\n<ul>\n<li>간단히 해결되었다…!</li>\n</ul>\n<br />\n<h1 id=\"outro\" style=\"position:relative;\"><a href=\"#outro\" aria-label=\"outro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>outro…</h1>\n<p>꼬박 이틀을 바친…</p>\n<p>좀 헤매게 된다면 정리해서 바로 사수에게 물어보는 것도 좋을듯 하다.\n그치만 정말 좋은 경험이었다.</p>\n<p>‘못할 것 같다’라고 생각했었는데 결국엔 해냈을 때, ‘어떤 일도 할 수 있다’라는 데이터가 축적되면 더 재밌게 개발할 수 있지 않을까?</p>","excerpt":"Intro… 임무는 외부링크로 연결되는 a태그를 새로운 창에서 열리게 하는 것이었다. \n회사는 마크다운으로 회사 랜딩페이지의 글들을 렌더링하고 있었다. \n렌더링 된 html에  속성을 넣고 팀장님이 이건 근본적인 해결이 아니라고 코멘트 해주셨다.  마크다운 문법을 html로 렌더링 시키는 렌더러에서 작업을 수행해야 했는데, \n묘하게도 속성만 DOM에 나타나지 않았다. \n묘한일이다 묘한일이야… 뭔가 이상한데, 하며 입사 2주차였던 나는 선뜻 물어보지도 못하고 \n머리를 꽁꽁 싸매고 있었다. 이유는 뭐였을까? 원인 범인은 DOM Purify 였다. Dom Purify는 악성 스크립트를 삽입하는 XSS 공격을 막기 위한 라이브러리다. 깃허브를 보면 더러운 HTML을 깨끗한 HTML로 바꿔준다고 나와 있다. DOM Purify가 html을 살균하면서 보안에 취약한 을 더티코드로 인식해 제거해버린 것이다.  왜 보안에 취약할까? 해당 속성들을 살펴보면서 알아보자  \n이 둘은 보통 짝으로 같이…","frontmatter":{"date":"November 01, 2021","title":"Error/ DOM에 렌더링 될 때 target=\"\\_blank\" 속성이 사라져요! , Renderer remove my attribute!","categories":"Error","author":"양다은","emoji":"💧"},"fields":{"slug":"/DOMPurify/"}},"next":{"id":"d9f91328-f84f-5e3d-bcb1-52514d904c34","html":"<h1 id=\"state-올바르게-사용하기-3원칙\" style=\"position:relative;\"><a href=\"#state-%EC%98%AC%EB%B0%94%EB%A5%B4%EA%B2%8C-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0-3%EC%9B%90%EC%B9%99\" aria-label=\"state 올바르게 사용하기 3원칙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>state 올바르게 사용하기: 3원칙</h1>\n<h2 id=\"01-state를-직접-수정하지-않습니다\" style=\"position:relative;\"><a href=\"#01-state%EB%A5%BC-%EC%A7%81%EC%A0%91-%EC%88%98%EC%A0%95%ED%95%98%EC%A7%80-%EC%95%8A%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-label=\"01 state를 직접 수정하지 않습니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>01 state를 직접 수정하지 않습니다</h2>\n<p>this.state를 지정할 수 있는 공간은 constructor 뿐입니다.(초기 세팅)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    class Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {date: new Date()};\n  }\n\n  render() {\n    return (\n      &lt;div>\n        &lt;h1>Hello, world!&lt;/h1>\n        &lt;h2>It is {this.state.date.toLocaleTimeString()}.&lt;/h2>\n      &lt;/div>\n    );\n  }\n}</code></pre></div>\n<p>클래스 컴포넌트는 항상 props로 기본 constructor를 호출해야 합니다.</p>\n<p>다음과 같이 쓰여진 코드는 리렌더링 되지 않을 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// Wrong\nthis.state.comment = 'Hello';</code></pre></div>\n<p>대신에, setState를 사용해야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// Correct\nthis.setState({comment: 'Hello'});</code></pre></div>\n<br>\n<h2 id=\"02-state-업데이트는-비동기적일-수-있습니다\" style=\"position:relative;\"><a href=\"#02-state-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8%EB%8A%94-%EB%B9%84%EB%8F%99%EA%B8%B0%EC%A0%81%EC%9D%BC-%EC%88%98-%EC%9E%88%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-label=\"02 state 업데이트는 비동기적일 수 있습니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>02 state 업데이트는 비동기적일 수 있습니다</h2>\n<p>다음과 같이 props와 기존 state를 한꺼번에 처리하는 경우가 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// Wrong\nthis.setState({\n  counter: this.state.counter + this.props.increment,\n});</code></pre></div>\n<p>this.props와 this.state는 비동기적으로 업데이트 될 수 있기 때문에 객체 형식이 아닌 함수를 인자로 사용하는 형태를 사용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// Correct\n// 화살표 함수\nthis.setState((state, props) => ({\n  counter: state.counter + props.increment\n}));\n\n// 일반 함수\nthis.setState(function(state, props) {\n  return {\n    counter: state.counter + props.increment\n  };\n});</code></pre></div>\n<br>\n<h2 id=\"03-state의-업데이트는-병합됩니다\" style=\"position:relative;\"><a href=\"#03-state%EC%9D%98-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8%EB%8A%94-%EB%B3%91%ED%95%A9%EB%90%A9%EB%8B%88%EB%8B%A4\" aria-label=\"03 state의 업데이트는 병합됩니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>03 state의 업데이트는 병합됩니다</h2>\n<p>state는 객체형태로 지정이 가능합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> constructor(props) {\n    super(props);\n    this.state = {\n      posts: [],\n      comments: []\n    };\n  }</code></pre></div>\n<p>다양한 독립적인 변수를 포함할 수 있는데, 이러한 변수들을 또 독립적으로 업데이트 할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> componentDidMount() {\n    // posts만 업데이트\n    fetchPosts().then(response => {\n      this.setState({\n        posts: response.posts\n      });\n    });\n\n    // comments만 업데이트\n    fetchComments().then(response => {\n      this.setState({\n        comments: response.comments\n      });\n    });\n  }</code></pre></div>\n<p>this.setState({comments})를 진행할 때 this.state.posts에 영향을 주지 않으며,\n병합은 얕게 이루어지므로 this.state.comments는 완전히 교체된다.</p>\n<p>(깊은 병합 deep merge, 얕은 병합 shallow merge 참고: <a href=\"https://velog.io/@jonmad/JS-Object-Deep-Merging-Shallow-Merging\">https://velog.io/@jonmad/JS-Object-Deep-Merging-Shallow-Merging</a>)</p>","frontmatter":{"date":"October 22, 2021","title":"React/ state 올바르게 사용하기","categories":"React","author":"양다은","emoji":"😎"},"fields":{"slug":"/test/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://www.zoomkoding.com","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/DOMPurify/","nextSlug":"/test/","prevSlug":""}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}